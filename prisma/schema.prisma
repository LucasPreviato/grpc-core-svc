// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GeneralStatus {
  ACTIVE
  INACTIVE
  DELETED
}

model Company {
  resourceId String @default(uuid())
  companyId  Int    @id @unique @default(autoincrement())
  tableId    Int    @default(autoincrement())
  cnpj        String
  companyName String
  tradingName String
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  phone       String?
  email       String?
  website     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Unit        Unit[]
  Employee    Employee[]

  @@unique([cnpj, companyName])
  @@map("companies")
}

model Unit {
  resourceId  String       @default(uuid())
  unitId      Int          @id @default(autoincrement())
  tableId     Int          @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Company     Company?     @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  companyId   Int?
  Employee    Employee[]
  Department  Department[]

  @@unique([name, companyId, unitId])
  @@map("units")
}

model Department {
  resourceId   String     @default(uuid())
  departmentId Int        @id @default(autoincrement())
  tableId      Int        @default(autoincrement())
  name         String
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Unit         Unit?      @relation(fields: [unitId], references: [unitId], onDelete: Cascade)
  unitId       Int?
  Employee     Employee[]

  @@unique([name, unitId, departmentId, tableId])
  @@map("departments")
}

model Employee {
  resourceId             String      @default(uuid())
  employeeId             Int         @id @unique @default(autoincrement())
  firstName              String
  lastName               String
  Company                Company?    @relation(fields: [companyId], references: [companyId], onDelete: Cascade)
  companyId              Int?
  Unit                   Unit?       @relation(fields: [unitId], references: [unitId])
  unitId                 Int?
  Department             Department? @relation(fields: [departmentDepartmentId], references: [departmentId])
  departmentDepartmentId Int?

  @@map("employees")
}
