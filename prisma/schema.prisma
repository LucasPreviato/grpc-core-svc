// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  resourceId  String        @default(cuid())
  companyId   Int           @id @unique @default(autoincrement())
  cnpj        String
  companyName String
  tradingName String
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  phone       String?
  email       String?
  website     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Unit        Unit[]
  JobCategory JobCategory[]
  Department  Department[]
  Jobs        Jobs[]
  Employee    Employee[]

  @@unique([cnpj, companyName])
  @@map("companies")
}

model Unit {
  resourceId  String       @default(cuid())
  unitId      Int          @id @default(autoincrement())
  tableId     Int
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Company     Company      @relation(fields: [companyId], references: [companyId])
  companyId   Int
  Employee    Employee[]
  Department  Department[]

  @@unique([name, companyId])
  @@map("units")
}

model Department {
  resourceId   String     @default(cuid())
  departmentId Int        @id @default(autoincrement())
  tableId      Int
  name         String
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Unit         Unit       @relation(fields: [unitId], references: [unitId])
  unitId       Int
  Company      Company    @relation(fields: [companyId], references: [companyId])
  companyId    Int
  Employee     Employee[]

  @@unique([name, unitId, departmentId])
  @@map("departments")
}

model JobCategory {
  resourceId    String   @default(cuid())
  jobCategoryId Int      @id @default(autoincrement())
  tableId       Int
  name          String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Company       Company  @relation(fields: [companyId], references: [companyId])
  companyId     Int
  Jobs          Jobs[]

  @@unique([name, jobCategoryId, companyId])
  @@map("job_categories")
}

model Jobs {
  resourceId    String       @default(cuid())
  jobId         Int          @id @default(autoincrement())
  tableId       Int
  name          String
  description   String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  JobCategory   JobCategory? @relation(fields: [jobCategoryId], references: [jobCategoryId])
  jobCategoryId Int?
  Company       Company      @relation(fields: [companyId], references: [companyId])
  companyId     Int
  Employee      Employee[]

  @@unique([name, jobCategoryId])
  @@map("jobs")
}

model Employee {
  resourceId   String      @default(cuid())
  employeeId   Int         @id @default(autoincrement())
  tableId      Int
  firstName    String
  lastName     String
  Unit         Unit?       @relation(fields: [unitId], references: [unitId])
  unitId       Int?
  Department   Department? @relation(fields: [departmentId], references: [departmentId])
  departmentId Int?
  Jobs         Jobs?       @relation(fields: [jobsJobId], references: [jobId])
  jobsJobId    Int?
  Company      Company     @relation(fields: [companyId], references: [companyId])
  companyId    Int

  @@unique([firstName, lastName, unitId, departmentId])
  @@map("employees")
}
